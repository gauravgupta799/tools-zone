@use '../abstract/mixins' as *;
@use '../abstract/function' as *;
@use '../abstract/font' as *;
@use '../abstract/colors' as *;

// ===== base and responsive font size  ========

// Breakpoint values for min-width operators.
$breakpoints: (
  sm : em(576),
  md: em(768),
  lg: em(992),
  xl: em(1200),
  xxl:em(1600),
  xxxl:em(1920)
);

// Null is mobile, no breakpoint.
$p-font-sizes: (
  null: (rem(14), rem(24)),
  sm: (rem(14), rem(24)),
  md: (rem(14), rem(24)),
  lg: (rem(14), rem(24)),
  xl: (rem(16), rem(24)),
  xxl: (rem(16), rem(24)),
);

$h1-font-sizes: (
  null: (rem(32), rem(40)),   
  sm : (rem(36), rem(44)),
  md : (rem(40), rem(48)),
  lg:  (rem(40), rem(48)),
  xl:  (rem(44), rem(52)),
  xxl: (rem(48), rem(60)),
);

$h2-font-sizes: (
  null:(rem(28), rem(36)) , 
  sm :(rem(32), rem(40)),
  md :(rem(36), rem(44)),
  lg: (rem(36), rem(44)),
  xl: (rem(40), rem(48)),
  xxl: (rem(44), rem(48)),
);

$h3-font-sizes: (
  null:(rem(24), rem(32)), 
  sm :(rem(28), rem(36)),
  md :(rem(32), rem(40)),
  lg:(rem(32), rem(40)),
  xl: (rem(36), rem(44)),
  xxl:(rem(40), rem(48)),
);

$h4-font-sizes: (
  null:(rem(22), rem(32)), 
  sm :(rem(24), rem(32)),
  md :(rem(28), rem(36)),
  lg:(rem(28), rem(36)),
  xl: (rem(32), rem(40)),
  xxl: (rem(36), rem(44)),
);

$h5-font-sizes: (
  null: (rem(20), rem(28)),
  sm : (rem(22), rem(30)),
  md : (rem(24), rem(32)),
  lg:(rem(26), rem(34)),
  xl:(rem(26), rem(34)),
  xxl:(rem(28), rem(36)),
);


$h6-font-sizes: (
  null:(rem(18), rem(26)),
  sm :(rem(20), rem(28)),
  md :(rem(20), rem(28)),
  lg:(rem(22), rem(30)),
  xl:(rem(22), rem(30)),
  xxl:(rem(24), rem(32)),
);

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}


// ======== adding both font size and font-family mixins====
h1{
  @include font-size($h1-font-sizes);
}

h2{
  @include font-size($h2-font-sizes);
}

h3{
  @include font-size($h3-font-sizes);
}

h4{
  @include font-size($h4-font-sizes);
}

h5{
  @include font-size($h5-font-sizes);
}

h6{
  @include font-size($h6-font-sizes);
}

h1, h2, h3, h4, h5, h6{
  @include font-heading;
  text-transform: capitalize;
}

.bg-colored{
  h1, h2, h3, h4, h5, h6, p{
    color:$clr-white;
  }
}

p, ul, ol, body{
    @include font-size($p-font-sizes);
    @include font-body;
}